{"version":3,"sources":["components/countChangeButton.jsx","components/individualBar.jsx","components/progressBars.jsx","App.js","serviceWorker.js","index.js"],"names":["CountChangeButton","props","onClick","onChangeProgressBar","button","IndividualBar","bar","additionalClass","console","log","className","data-label","style","width","ProgressBars","handleProgressBar","state","limit","barOptionSelected","bars","barAdditionalClass","index","total","setState","handleSelectChange","event","target","value","buttons","isLoading","apiEndpointUrl","config","apiEndpoint","axios","get","res","data","length","push","this","barsCount","_","range","map","key","count","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79e795ef.chunk.js","sourcesContent":["import React from \"react\";\r\nconst CountChangeButton = props => {\r\n  return <button onClick={props.onChangeProgressBar}>{props.button}</button>;\r\n};\r\n\r\nexport default CountChangeButton;\r\n","import React from \"react\";\r\nconst IndividualBar = ({ bar, additionalClass }) => {\r\n  console.log(\"hello\", additionalClass);\r\n  return (\r\n    <div\r\n      className={additionalClass ? \"progress add\" : \"progress\"}\r\n      data-label={`${bar}%`}\r\n    >\r\n      <span className=\"value\" style={{ width: `${bar}%` }}>\r\n        {additionalClass}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndividualBar;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport _ from \"lodash\";\r\nimport config from \"../config.json\";\r\nimport CountChangeButton from \"./countChangeButton\";\r\nimport IndividualBar from \"./individualBar.jsx\";\r\nclass ProgressBars extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      bars: [],\r\n      buttons: [],\r\n      limit: \"\",\r\n      barOptionSelected: \"0\",\r\n      barAdditionalClass: [],\r\n      isLoading: true\r\n    };\r\n  }\r\n  async componentDidMount() {\r\n    const apiEndpointUrl = config.apiEndpoint;\r\n\r\n    try {\r\n      const res = await axios.get(apiEndpointUrl);\r\n\r\n      let barAdditionalClass = [];\r\n      for (let index = 0; index < res.data.bars.length; index++) {\r\n        if (\r\n          res.data.bars[index] > 100 &&\r\n          res.data.bars[index] < res.data.limit\r\n        ) {\r\n          barAdditionalClass.push(true);\r\n        } else if (res.data.bars[index] < 100) {\r\n          barAdditionalClass.push(false);\r\n        }\r\n      }\r\n\r\n      this.setState({\r\n        bars: res.data.bars,\r\n        buttons: res.data.buttons,\r\n        limit: res.data.limit,\r\n        barAdditionalClass: barAdditionalClass,\r\n        isLoading: false\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      this.setState({ isLoading: false });\r\n    }\r\n  }\r\n  handleProgressBar = button => {\r\n    const { limit, barOptionSelected } = this.state;\r\n\r\n    const bars = [...this.state.bars];\r\n    const barAdditionalClass = [...this.state.barAdditionalClass];\r\n    const index = barOptionSelected;\r\n    const total = (bars[index] += button);\r\n    if (total < 0) {\r\n      bars[index] = 0;\r\n    } else if (total > limit) {\r\n      bars[index] = limit;\r\n    }\r\n    if (total > 100 && total < limit) {\r\n      barAdditionalClass[index] = true;\r\n    } else if (total < 100) {\r\n      barAdditionalClass[index] = false;\r\n    }\r\n    this.setState({ bars, barAdditionalClass });\r\n  };\r\n  handleSelectChange = event => {\r\n    this.setState({\r\n      barOptionSelected: event.target.value\r\n    });\r\n  };\r\n  render() {\r\n    const barsCount = _.range(0, this.state.bars.length);\r\n    const { barAdditionalClass, bars } = this.state;\r\n    return (\r\n      <div>\r\n        {bars.length ? (\r\n          <div className=\"holder\">\r\n            <h1>Progress Bars</h1>\r\n            {bars.map((bar, index) => (\r\n              <IndividualBar\r\n                additionalClass={barAdditionalClass[index]}\r\n                key={index}\r\n                bar={bar}\r\n              />\r\n            ))}\r\n\r\n            <select onClick={this.handleSelectChange}>\r\n              {barsCount.map((count, index) => (\r\n                <option key={index} value={count}>\r\n                  Progress bar{count + 1}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            {this.state.buttons.map(value => (\r\n              <CountChangeButton\r\n                key={value}\r\n                button={value}\r\n                onChangeProgressBar={() => this.handleProgressBar(value)}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          \"Loading...\"\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default ProgressBars;\r\n","import React from \"react\";\r\nimport \"./App.scss\";\r\nimport ProgressBars from \"./components/progressBars\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"progressbar-holder\">\r\n      <ProgressBars></ProgressBars>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}